**useContext :**

The useContext hook is a React hook that provides a way to consume values from the React context within functional components. Context in React is a mechanism to share values like themes, authentication status, or other global state between components without explicitly passing the props through every level of the component tree.


```jsx
const value = useContext(SomeContext)
```
Call `useContext` at the top level of your component to read and subscribe to [context.]
import { useContext } from "react";
import { AppContext } from "../context/AppContextProvider";

// 3. consume
function RightNavbar() {
  const { language } = useContext(AppContext);
	...
}

****Parameters:****
`SomeContext`: The context that you’ve previously created with `[createContext](https://react.dev/reference/react/createContext)`. The context itself does not hold the information, it only represents the kind of information you can provide or read from components.
**returns:** 
`useContext` returns the context value for the calling component. It is determined as the `value` passed to the closest `SomeContext.Provider` above the calling component in the tree. If there is no such provider, then the returned value will be the `defaultValue` you have passed to `[createContext](https://react.dev/reference/react/createContext)` for that context. The returned value is always up-to-date. React automatically re-renders components that read some context if it changes.
**Caveats** : 

- `useContext()` call in a component is not affected by providers returned from the *same* component. The corresponding `<Context.Provider>` **needs to be *above*** the component doing the `useContext()` call.
- React **automatically re-renders** all the children that use a particular context starting from the provider that receives a different `value`. The previous and the next values are compared with the `[Object.is](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is)` comparison. Skipping re-renders with `[memo](https://react.dev/reference/react/memo)` does not prevent the children receiving fresh context values.
- If your build system produces duplicates modules in the output (which can happen with symlinks), this can break context. Passing something via context only works if `SomeContext` that you use to provide context and `SomeContext` that you use to read it are ***exactly* the same object**, as determined by a `===` comparison.

Usage : 
**Passing data deeply into the tree**
Call `useContext` at the top level of your component to read and subscribe to [context.](https://react.dev/learn/passing-data-deeply-with-context)
import { useContext } from "react";
import { AppContext } from "../context/AppContextProvider";

// 3. consume
function RightNavbar() {
  const { language } = useContext(AppContext);
	...}

`useContext` returns the context value for the context you passed. To determine the context value, React searches the component tree and finds **the closest context provider above**
 for that particular context.
To pass context to a RightNavbar component, wrap it or one of its parent components into the corresponding context provider:

import { createRoot } from "react-dom/client";
import App from "./App";
import AppContextProvider from "./context/AppContextProvider";

const rootElement = document.getElementById("root");
const root = createRoot(rootElement);

root.render(
  <AppContextProvider>
    <App />
  </AppContextProvider>
);

It doesn’t matter how many layers of components there are between the provider and the `RightNavbar`. When a `RightNavbar` *anywhere* inside of `App` calls `useContext(AppContext)`, it will receive the language selected in `AppContextProvider` as the value.
