// .................................... transactions .........................................

A transaction is a unit of work that is performed within a database management system (DBMS) against a database and is treated in a coherent and reliable way, independent of other transactions. The concept of transactions ensures that a series of related operations are executed as a single, indivisible unit. Transactions are crucial for maintaining data integrity, consistency, and reliability in database systems. The key properties of transactions are often referred to as ACID:

transection RULES : 
        ATOMICITY : all or nothing 
        CONSISTENCY : total maount will remain same before and after transection 
        ISOLATION : paraller transection , no data passing no intersection 
        DURABILITY : work after transection (dosnt break)


// .................................... Explain Inner and outer join. .........................................
Inner join and outer join are two types of join operations in relational databases that allow you to combine rows from two or more tables based on a related column. Let's delve into each type:

Inner Join:
An inner join returns only the rows from both tables that satisfy the specified condition.
It combines rows from two or more tables based on a related column, and only the rows where there is a match in both tables are included in the result set.
    example :     SELECT employees.employee_id, employees.employee_name, departments.department_name
                FROM employees
                INNER JOIN departments ON employees.department_id = departments.department_id;

Outer Join:
An outer join returns all the rows from one table and the matching rows from another table. If there is no match, NULL values are included for columns from the table with no matching row.
There are three types of outer joins: left outer join, right outer join, and full outer join.

     JOIN/ INNER JOIN 
                select * from Students (combine both tables data )
                JOIN Courses ON 
                Students.CourseID = Coruses.id;

        LEFT JOIN 
                select * from Students (SHOW COMBINE DATA WHERE STUDENT HAVE EMPTY COUSER)
                LEFT Courses ON 
                Students.CourseID = Coruses.id;

        RIGHT JOIN 
                select * from Students  (SHOW COMBINE DATA WHERE COUSER HAVE EMPTY STUDENT)
                RIGHT Courses ON 
                Students.CourseID = Coruses.id;   

                select Courses.name , AVG(Students.score) from Students  (average score of syudent in each couses)
                JOIN Courses
                ON Students.CourseID = Courses.id
                GROUP BY Students.CourseID;

        Full Outer Join:
                Returns all rows when there is a match in either the left or right table. If there is no match, 
                NULL values are included for columns from the table with no matching row.

        SELF JOIN : REGULAR JOIN (JOINS ITSELF)
                select * from Students 
                JOIN Courses ON 
                Students.CourseID = Coruses.id;